{
 "cells": [
  {
   "cell_type": "markdown",
   "id": "5bf52869",
   "metadata": {
    "papermill": {
     "duration": 0.009546,
     "end_time": "2021-08-22T17:29:45.121039",
     "exception": false,
     "start_time": "2021-08-22T17:29:45.111493",
     "status": "completed"
    },
    "tags": []
   },
   "source": [
    "# Powerlaw Eflux"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 1,
   "id": "f94666ca",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2021-08-22T17:29:45.147437Z",
     "iopub.status.busy": "2021-08-22T17:29:45.146538Z",
     "iopub.status.idle": "2021-08-22T17:29:47.532667Z",
     "shell.execute_reply": "2021-08-22T17:29:47.533277Z"
    },
    "nbsphinx": "hidden",
    "papermill": {
     "duration": 2.404215,
     "end_time": "2021-08-22T17:29:47.533626",
     "exception": false,
     "start_time": "2021-08-22T17:29:45.129411",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "%%capture\n",
    "\n",
    "import numpy as np\n",
    "\n",
    "import matplotlib.pyplot as plt\n",
    "\n",
    "import warnings\n",
    "warnings.simplefilter(\"ignore\")\n",
    "\n",
    "from astromodels.functions.function import _known_functions\n",
    "\n",
    "\n",
    "from jupyterthemes import jtplot\n",
    "jtplot.style(context=\"talk\", fscale=1, ticks=True, grid=False)\n",
    "%matplotlib inline"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 2,
   "id": "fd361132",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2021-08-22T17:29:47.555293Z",
     "iopub.status.busy": "2021-08-22T17:29:47.554398Z",
     "iopub.status.idle": "2021-08-22T17:29:47.561127Z",
     "shell.execute_reply": "2021-08-22T17:29:47.561710Z"
    },
    "nbsphinx": "hidden",
    "papermill": {
     "duration": 0.019811,
     "end_time": "2021-08-22T17:29:47.561967",
     "exception": false,
     "start_time": "2021-08-22T17:29:47.542156",
     "status": "completed"
    },
    "tags": [
     "parameters"
    ]
   },
   "outputs": [],
   "source": [
    "func_name = \"TbAbs\"\n",
    "\n",
    "x_scale=\"log\"\n",
    "y_scale=\"log\"\n",
    "\n",
    "linear_range = False\n",
    "\n",
    "wide_energy_range = False"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 3,
   "id": "c2c4a3f6",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2021-08-22T17:29:47.583506Z",
     "iopub.status.busy": "2021-08-22T17:29:47.582637Z",
     "iopub.status.idle": "2021-08-22T17:29:47.589109Z",
     "shell.execute_reply": "2021-08-22T17:29:47.589663Z"
    },
    "papermill": {
     "duration": 0.019633,
     "end_time": "2021-08-22T17:29:47.589908",
     "exception": false,
     "start_time": "2021-08-22T17:29:47.570275",
     "status": "completed"
    },
    "tags": [
     "injected-parameters"
    ]
   },
   "outputs": [],
   "source": [
    "# Parameters\n",
    "func_name = \"Powerlaw_Eflux\"\n",
    "wide_energy_range = True\n",
    "x_scale = \"log\"\n",
    "y_scale = \"log\"\n",
    "linear_range = False\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 4,
   "id": "d169a183",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2021-08-22T17:29:47.613629Z",
     "iopub.status.busy": "2021-08-22T17:29:47.612755Z",
     "iopub.status.idle": "2021-08-22T17:29:47.619181Z",
     "shell.execute_reply": "2021-08-22T17:29:47.619763Z"
    },
    "lines_to_next_cell": 0,
    "nbsphinx": "hidden",
    "papermill": {
     "duration": 0.021646,
     "end_time": "2021-08-22T17:29:47.620016",
     "exception": false,
     "start_time": "2021-08-22T17:29:47.598370",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "func = _known_functions[func_name]()\n",
    "\n",
    "if wide_energy_range:\n",
    "\n",
    "    energy_grid = np.geomspace(1e2,1e4,500)\n",
    "    \n",
    "else:\n",
    "    \n",
    "    energy_grid = np.geomspace(2e-1,1e1,1000)\n",
    "\n",
    "if linear_range:\n",
    "\n",
    "\tenergy_grid = np.linspace(-5,5,1000)\n",
    "\n",
    "    \n",
    "blue = \"#4152E3\"\n",
    "red = \"#E3414B\"\n",
    "green = \"#41E39E\""
   ]
  },
  {
   "cell_type": "markdown",
   "id": "bc446f55",
   "metadata": {
    "lines_to_next_cell": 0,
    "papermill": {
     "duration": 0.008725,
     "end_time": "2021-08-22T17:29:47.637299",
     "exception": false,
     "start_time": "2021-08-22T17:29:47.628574",
     "status": "completed"
    },
    "tags": []
   },
   "source": [
    "## Description"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 5,
   "id": "c476fce2",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2021-08-22T17:29:47.667250Z",
     "iopub.status.busy": "2021-08-22T17:29:47.666283Z",
     "iopub.status.idle": "2021-08-22T17:29:47.674110Z",
     "shell.execute_reply": "2021-08-22T17:29:47.674669Z"
    },
    "papermill": {
     "duration": 0.028337,
     "end_time": "2021-08-22T17:29:47.674922",
     "exception": false,
     "start_time": "2021-08-22T17:29:47.646585",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "data": {
      "text/html": [
       "<ul>\n",
       "\n",
       "<li>description: A  power-law where the normalization is the energy flux defined between a and b</li>\n",
       "\n",
       "<li>formula: $ F~\\frac{x}{piv}^{index} $</li>\n",
       "\n",
       "<li>parameters: \n",
       "<ul>\n",
       "\n",
       "<li>F: \n",
       "<ul>\n",
       "\n",
       "<li>value: 1e-05</li>\n",
       "\n",
       "<li>desc: Normalization (energy flux at the between a and b) erg /cm2 s</li>\n",
       "\n",
       "<li>min_value: 1e-30</li>\n",
       "\n",
       "<li>max_value: 1000.0</li>\n",
       "\n",
       "<li>unit: </li>\n",
       "\n",
       "<li>is_normalization: True</li>\n",
       "\n",
       "<li>delta: 0.1</li>\n",
       "\n",
       "<li>free: True</li>\n",
       "\n",
       "</ul>\n",
       "\n",
       "</li>\n",
       "\n",
       "<li>piv: \n",
       "<ul>\n",
       "\n",
       "<li>value: 1.0</li>\n",
       "\n",
       "<li>desc: Pivot value</li>\n",
       "\n",
       "<li>min_value: None</li>\n",
       "\n",
       "<li>max_value: None</li>\n",
       "\n",
       "<li>unit: </li>\n",
       "\n",
       "<li>is_normalization: False</li>\n",
       "\n",
       "<li>delta: 0.1</li>\n",
       "\n",
       "<li>free: False</li>\n",
       "\n",
       "</ul>\n",
       "\n",
       "</li>\n",
       "\n",
       "<li>index: \n",
       "<ul>\n",
       "\n",
       "<li>value: -2.0</li>\n",
       "\n",
       "<li>desc: Photon index</li>\n",
       "\n",
       "<li>min_value: -10.0</li>\n",
       "\n",
       "<li>max_value: 10.0</li>\n",
       "\n",
       "<li>unit: </li>\n",
       "\n",
       "<li>is_normalization: False</li>\n",
       "\n",
       "<li>delta: 0.2</li>\n",
       "\n",
       "<li>free: True</li>\n",
       "\n",
       "</ul>\n",
       "\n",
       "</li>\n",
       "\n",
       "<li>a: \n",
       "<ul>\n",
       "\n",
       "<li>value: 1.0</li>\n",
       "\n",
       "<li>desc: lower energy integral bound (keV)</li>\n",
       "\n",
       "<li>min_value: 0.0</li>\n",
       "\n",
       "<li>max_value: None</li>\n",
       "\n",
       "<li>unit: </li>\n",
       "\n",
       "<li>is_normalization: False</li>\n",
       "\n",
       "<li>delta: 0.1</li>\n",
       "\n",
       "<li>free: False</li>\n",
       "\n",
       "</ul>\n",
       "\n",
       "</li>\n",
       "\n",
       "<li>b: \n",
       "<ul>\n",
       "\n",
       "<li>value: 100.0</li>\n",
       "\n",
       "<li>desc: upper energy integral bound (keV)</li>\n",
       "\n",
       "<li>min_value: 0.0</li>\n",
       "\n",
       "<li>max_value: None</li>\n",
       "\n",
       "<li>unit: </li>\n",
       "\n",
       "<li>is_normalization: False</li>\n",
       "\n",
       "<li>delta: 10.0</li>\n",
       "\n",
       "<li>free: False</li>\n",
       "\n",
       "</ul>\n",
       "\n",
       "</li>\n",
       "\n",
       "</ul>\n",
       "\n",
       "</li>\n",
       "\n",
       "</ul>\n"
      ],
      "text/plain": [
       "  * description: A  power-law where the normalization is the energy flux defined between\n",
       "    * a and b\n",
       "  * formula: $ F~\\frac{x}{piv}^{index} $\n",
       "  * parameters:\n",
       "    * F:\n",
       "      * value: 1.0e-05\n",
       "      * desc: Normalization (energy flux at the between a and b) erg /cm2 s\n",
       "      * min_value: 1.0e-30\n",
       "      * max_value: 1000.0\n",
       "      * unit: ''\n",
       "      * is_normalization: true\n",
       "      * delta: 0.1\n",
       "      * free: true\n",
       "    * piv:\n",
       "      * value: 1.0\n",
       "      * desc: Pivot value\n",
       "      * min_value: null\n",
       "      * max_value: null\n",
       "      * unit: ''\n",
       "      * is_normalization: false\n",
       "      * delta: 0.1\n",
       "      * free: false\n",
       "    * index:\n",
       "      * value: -2.0\n",
       "      * desc: Photon index\n",
       "      * min_value: -10.0\n",
       "      * max_value: 10.0\n",
       "      * unit: ''\n",
       "      * is_normalization: false\n",
       "      * delta: 0.2\n",
       "      * free: true\n",
       "    * a:\n",
       "      * value: 1.0\n",
       "      * desc: lower energy integral bound (keV)\n",
       "      * min_value: 0.0\n",
       "      * max_value: null\n",
       "      * unit: ''\n",
       "      * is_normalization: false\n",
       "      * delta: 0.1\n",
       "      * free: false\n",
       "    * b:\n",
       "      * value: 100.0\n",
       "      * desc: upper energy integral bound (keV)\n",
       "      * min_value: 0.0\n",
       "      * max_value: null\n",
       "      * unit: ''\n",
       "      * is_normalization: false\n",
       "      * delta: 10.0\n",
       "      * free: false"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "func.display()"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "519a6cf0",
   "metadata": {
    "papermill": {
     "duration": 0.009185,
     "end_time": "2021-08-22T17:29:47.693566",
     "exception": false,
     "start_time": "2021-08-22T17:29:47.684381",
     "status": "completed"
    },
    "tags": []
   },
   "source": [
    "## Shape \n",
    "\n",
    "The shape of the function. \n",
    "\n",
    "*If this is not a photon model but a prior or linear function then ignore the units as these docs are auto-generated*"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 6,
   "id": "6212ae0e",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2021-08-22T17:29:47.740283Z",
     "iopub.status.busy": "2021-08-22T17:29:47.739410Z",
     "iopub.status.idle": "2021-08-22T17:29:49.154869Z",
     "shell.execute_reply": "2021-08-22T17:29:49.155852Z"
    },
    "papermill": {
     "duration": 1.453073,
     "end_time": "2021-08-22T17:29:49.156138",
     "exception": false,
     "start_time": "2021-08-22T17:29:47.703065",
     "status": "completed"
    },
    "tags": [
     "nbsphinx-thumbnail"
    ]
   },
   "outputs": [
    {
     "data": {
      "image/png": "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\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "fig, ax = plt.subplots()\n",
    "\n",
    "\n",
    "ax.plot(energy_grid, func(energy_grid), color=blue)\n",
    "\n",
    "ax.set_xlabel(\"energy (keV)\")\n",
    "ax.set_ylabel(\"photon flux\")\n",
    "ax.set_xscale(x_scale)\n",
    "ax.set_yscale(y_scale)\n"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "6e40bfed",
   "metadata": {
    "lines_to_next_cell": 0,
    "papermill": {
     "duration": 0.010218,
     "end_time": "2021-08-22T17:29:49.177118",
     "exception": false,
     "start_time": "2021-08-22T17:29:49.166900",
     "status": "completed"
    },
    "tags": []
   },
   "source": [
    "## F$_{\\nu}$\n",
    "\n",
    "The F$_{\\nu}$ shape of the photon model\n",
    "*if this is not a photon model, please ignore this auto-generated plot*"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 7,
   "id": "4f6c6e24",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2021-08-22T17:29:49.224297Z",
     "iopub.status.busy": "2021-08-22T17:29:49.204204Z",
     "iopub.status.idle": "2021-08-22T17:29:49.809587Z",
     "shell.execute_reply": "2021-08-22T17:29:49.810211Z"
    },
    "papermill": {
     "duration": 0.623385,
     "end_time": "2021-08-22T17:29:49.810513",
     "exception": false,
     "start_time": "2021-08-22T17:29:49.187128",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "fig, ax = plt.subplots()\n",
    "\n",
    "ax.plot(energy_grid, energy_grid * func(energy_grid), red)\n",
    "\n",
    "\n",
    "ax.set_xlabel(\"energy (keV)\")\n",
    "ax.set_ylabel(r\"energy flux (F$_{\\nu}$)\")\n",
    "ax.set_xscale(x_scale)\n",
    "ax.set_yscale(y_scale)\n",
    "\n"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "54698bf0",
   "metadata": {
    "papermill": {
     "duration": 0.011213,
     "end_time": "2021-08-22T17:29:49.834015",
     "exception": false,
     "start_time": "2021-08-22T17:29:49.822802",
     "status": "completed"
    },
    "tags": []
   },
   "source": [
    "## $\\nu$F$_{\\nu}$\n",
    "\n",
    "The $\\nu$F$_{\\nu}$ shape of the photon model\n",
    "*if this is not a photon model, please ignore this auto-generated plot*"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 8,
   "id": "70339d5e",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2021-08-22T17:29:49.899976Z",
     "iopub.status.busy": "2021-08-22T17:29:49.867605Z",
     "iopub.status.idle": "2021-08-22T17:29:50.379079Z",
     "shell.execute_reply": "2021-08-22T17:29:50.379726Z"
    },
    "papermill": {
     "duration": 0.535063,
     "end_time": "2021-08-22T17:29:50.380010",
     "exception": false,
     "start_time": "2021-08-22T17:29:49.844947",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "data": {
      "image/png": "iVBORw0KGgoAAAANSUhEUgAAAZAAAAEaCAYAAAA/lAFyAAAAOXRFWHRTb2Z0d2FyZQBNYXRwbG90bGliIHZlcnNpb24zLjQuMywgaHR0cHM6Ly9tYXRwbG90bGliLm9yZy/MnkTPAAAACXBIWXMAAAsTAAALEwEAmpwYAAAQEElEQVR4nO3de5BkZXmA8Wd2JwMZUghuBZQlQjTOm9qAJDEilsQIWknESwTK4pYE/jBAWRKw1MqFEmJpuCjGYIwYReKF3TWRFQgXTSzDxUVMBMLGaNVLgiVmUcEguLrDOow7+eOcwWacne15Z3p7puf5VU1tn+4+fb7ZOjvPfKd7zxmamppCkqT5WtXvAUiSlicDIkkqMSCSpBIDIkkqMSCSpBIDIkkqMSCSpBIDIkkqGe73AOYSEfsAdwEvyMwf9ns8kqSf6MsMJCIOj4gbO5bPjYgHIuL+iDi546kXAF/f8yOUJO3OHp+BRMSlwCnAf7bL64CzgHXAKHB3RHwGOB74LHBgYRtrgDWd961fv/4rwOqhoaFHFvQNSNLKsgaYfP7zn7/3zAf6cQhrM/AD4Kh2+dXAxszcDmyPiNuAY4FjgEeBI4E3ApfMYxvnABd23rFz505WrVrF8PDwAQscvyStGJOTk7t8bI8HJDNviIjOgBwK3NnxlK3AQZl5OkBEfBR4/zw38zfAhhn3fXF4eHjNEUccMe8xS9JKtWXLFiYnJ2c9crMU3kTfCTwxY/nJ5GXmGfN9wcx8BHjKN3z33Xf/eGhoqDhESdJMS+FjvFuBgzuW1wLf6M9QJEndWgoBuR44KSL2ioi1wAuB2/s8JknSbvQ9IJn5NeCTwFeBW4A3Z+bj/R2VJGl3+vIeSGbeCtzasXwZcFk/xiJJqun7DESStDwZEElSiQGRJJUMfEAi4sSI2DA+Pr7vxMREv4cjSQNj4AOSmZsy89TR0dFtIyMj/R6OJA2MgQ+IJKk3DIgkqcSASJJKDIgkqcSASJJKDIgkqcSASJJKDIgkqcSASJJKDIgkqWTgA+K5sCSpNwY+IJ4LS5J6Y+ADIknqDQMiSSoxIJKkEgMiSSoxIJKkEgMiSSoxIJKkEgMiSSoxIJKkEgMiSSoZ+IB4LixJ6o2BD4jnwpKk3hj4gEiSesOASJJKDIgkqcSASJJKDIgkqcSASJJKDIgkqcSASJJKDIgkqcSASJJKDIgkqcSASJJKDIgkqWTgA+Lp3CWpNwY+IJ7OXZJ6Y+ADIknqDQMiSSoxIJKkEgMiSSoxIJKkEgMiSSoxIJKkEgMiSSoxIJKkEgMiSSoxIJKkEgMiSSoxIJKkEgMiSSoxIJKkkoEPiBeUkqTeGPiAeEEpSeqNgQ+IJKk3DIgkqcSASJJKDIgkqcSASJJKDIgkqcSASJJKDIgkqcSASJJKDIgkqcSASJJKDIgkqcSASJJKDIgkqcSASJJKDIgkqcSASJJKDIgkqcSASJJKBj4gEXFiRGwYHx/fd2Jiot/DkaSBMfABycxNmXnq6OjotpGRkX4PR5IGxsAHRJLUGwZEklRiQCRJJQZEklRiQCRJJQZEklRiQCRJJQZEklRiQCRJJQZEklRiQCRJJQZEklQyXFkpIn4TeC6wOTPvW9whSZKWg+oM5GhgO3BhRFy4iOORJC0TpYBk5sWZ+Q+ZeRrw7Yh4zyKPS5K0xFUPYV0JPBN4BvAzwI7FHJQkaekrBQT4APBt4KHM3LmI45EkLROlgGTmPYs9EEnS8jLneyAR8c0Zy6/p7XAkScvF7t5EP3jG8rW9GogkaXnZXUCmZiwP9WogkqTlZb4f450ZFEnSCrXbN9Ej4udpZh5DM5YByMyHezY6SdKStbuADAHfaf+cav98qOPxKWB1b4YmSVrK5gxIZq4CiIh9gKPau7+QmRO9HpgkaWnr9j2QbwAXABcDD0bE63o2okUWESdGxIbx8fF9JybsniQtlm4D8pzM/K3MPBJ4BfD2iPjTHo5r0WTmpsw8dXR0dNvIyEi/hyNJA6OrgGTmto7bdwFHAi+LiD/v1cAkSUtbV6cyiYjfAdZ2fB3cfr0DuKhno5MkLVndngvrCuBb7deDwG3Axva2JGkF6iogmfnsXg9EkrS8eE10SVKJAZEklRgQSVKJAZEklRgQSVKJAZEklRgQSVKJAZEklRgQSVKJAZEklRgQSVKJAZEklRgQSVKJAZEklRgQSVKJAZEklRgQSVKJAZEklRgQSVKJAZEklRgQSVKJAZEklRgQSVKJAZEklRgQSVKJAZEklRgQSVKJAZEklRgQSVKJAZEklRgQSVKJAZEklQx8QCLixIjYMD4+vu/ExES/hyNJA2PgA5KZmzLz1NHR0W0jIyP9Ho4kDYyBD4gkqTcMiCSpxIBIkkoMiCSpxIBIkkoMiCSpxIBIkkoMiCSpxIBIkkoMiCSpxIBIkkoMiCSpxIBIkkoMiCSpxIBIkkoMiCSpxIBIkkoMiCSpxIBIkkoMiCSpxIBIkkoMiCSpxIBIkkoMiCSpxIBIkkoMiCSpxIBIkkoMiCSpxIBIkkoMiCSpxIBIkkoMiCSpxIBIkkoMiCSpZLjfA1gOjnvwE0xO7ez3MCSpbHhoFTev/YNFfU1nIJKkEmcgXVjsakvSIHAGIkkqMSCSpBIDIkkqMSCSpBIDIkkqMSCSpBIDIkkqMSCSpBIDIkkqMSCSpBIDIkkqMSCSpBIDIkkqMSCSpBIDIkkqMSCSpBIDIkkqMSCSpBIDIkkqMSCSpBIDIkkqMSCSpBIDIkkqGe73AHYlIl4GnAmMAhdl5p19HpIkqUNfZiARcXhE3NixfG5EPBAR90fEye3dhwGnARcCL+/HOCVJu7bHAxIRlwI3dSyvA84C1gFHAe+KiKdl5uXAi4Ergc17epySpLn14xDWZuAHNLEAeDWwMTO3A9sj4jbg2IjYPzOvioijgI8Bt3S7gYhYA6zpvG/9+vVrJicn2bJly6J8E5K0EkxOTsKMn6fT9nhAMvOGiOgMyKFA5/sbW4GDgB0RcTWwN/DxeW7mHJpDX0+anJxk9erVU5OTk9/d1UoTExN7jYyM/Gjm/Tt37hyamJgYHRkZGV+1atXUPMfSV7v6npb6thbyWvNdt9vnd/O8uZ7j/rV0tjWI+9dcjy9wH1sDTM76yNTU1B7/Ghsbe+nY2NiN7e2/HRsbO6Xjsb8cGxs7a4Gvv2ZsdtfsZr0Nu7h/bGxsbGpsbGysH39fC/y7mPV7WurbWshrzXfdbp/fzfPmeo7719LZ1iDuX3M93qt9bCl8CmsrcHDH8lrg9oW8YGY+Ajwy8/6ImFjI60qSfmIp/D+Q64GTImKviFgLvJAFBmQOmxb4+HK0J7+nxdzWQl5rvut2+/xunjfXc9y/ls62BnH/ms+2FsXQ1NSeP+QaES8F3pKZr2qX3wKcDewEzsvMm/f4oOYQEWNAApGZ9/V7PBos7l/qtV7tY305hJWZtwK3dixfBlzWj7FIkmqWwiGs5eAR4O3M8r6KtAjcv9RrPdnH+nIIS5K0/DkDkSSVGBBJUokBkSSVGBBJUokBkSSVGBBJUokBkSSVGBBJUokBkSSVLIXTuS87EfES4I3t4gfac3tJiyYiXgacCYwCF2XmnbtZRZqXiNgHuAt4QWb+sPIazkBmiIjDI+LGjuVzI+KBiLg/Ik5u734J8IfA64HT+zFOLV9d7mOHAafRXFnz5f0Yp5anLvcvgAuAry9kWwakQ0RcCtzUsbwOOAtYR3MJ3ndFxNMy853AfsC7gA/3Yahapuaxj10OvBi4Etjcj7Fq+el2/4qIM4DPAru8xHc3PIT1VJuBzuu1vxrYmJnbge0RcRtwbERsax87v736odStbvex/TPzqog4CvgYcEt/hqtlpqv9CzgGeBQ4kuZw/CWVjTkD6ZCZN/DU3/YOBR7oWN4KHAT8MbA/8J6IOHOPDVDL3jz2saGIuBrYAGzcYwPUstbt/pWZp2fmecC/A++vbs8ZyNx2Ak/MWJ7MzN/r03g0eHa1j30E+Eh/hqQBMuv+Nb2QmWcs5MWdgcxtK3Bwx/Ja4Bv9GYoGlPuYeqmn+5cBmdv1wEkRsVdErAVeCNze5zFpsLiPqZd6un8ZkDlk5teATwJfpXkT882Z+Xh/R6VB4j6mXur1/uUlbSVJJc5AJEklBkSSVGJAJEklBkSSVGJAJEklBkSSVOKpTKRlICLOBb4DPAR8MDN/eR7rbgY+n5kXdtw3BHwT+Auas/6+MzMXdGpvrTzOQKQeiYjVi/Q6+9Jcf+aa4ktsBE6Ycd+RwAHAJuB9NJcmkObFGYhWvPbqf+8FnkNzLYWzM/N7EfFR4GGa39CPAP4FODUzd0TEoTTXgnkRzf/yPTMzt7TXWTgRmKL5Be1VEfEm4E+Ax4H1wNHAa2iuxXBYZv53O447gI9k5lUzhvhHwHWZ+eOI6Bz304EvAB/KzMsj4leBDwKHA18EXp+ZDwCfAi6PiOdOb4smKJ/JzMeAeyPikIj4lcz86sL+NrWSOAPRihYRv0BzyvQ3AIcAE8C7O55yevvYs2l+MJ8cEauAfwI+TXPq9fU0v8lPOw74OHB8RBwDnEsTjZcCrwXIzG3Av7bPJSLWAL/Rvu5MJ7bP7Rz3KE3srmvj8XPt8iU0J8y7B7iq3dbDwOfb15l2PE89TfwtgGeZ1rwYEK10pwHXZObmzPw/4HyaH67TPpGZW9ofwnfQnNn0SGB1Zl6Rmdsy833A6oh4XrvOXZl5TWY+AZxKM0P4n3Y28Fcdr30t8Mr29u8Cd7RjeFIbqxfQzHKmDdMcznosM89v73sVcG9mXtfOKt4GvCgi9msff/IwVkQcDjyTp8ZqC81sSuqah7C00h0CnB0Rb+i8MyL2bm92/kDfQfNv5hBgXUTMPJHcQe2fj3bc9yzgto7lrR23rwf+OiL2oZmJfHqW8a2h+UXv+x33PQd4BPiliHh6Zn6vHdNxs4zpGcBjNLG6op1xnQBcP+Oket+jmblIXXMGopXuIeDdmTmUmUPA3sCvZeaO3azz5el12vWO4KmhmLad5s3qac+avpGZDwH/Afx2+3X9LOsPA0Pt17StNIfEvgS8o2NMn+oYzyqaQ2L3tdv6PvAZmnicwE9f5XCK5mJDUtecgWiluwa4OSI+QfOx1otoZhLHz7HOl4ADIuK1wOdofiBfCvziLM/9PPDGiLiG5t/bW2g+jjvtWuBC4OuZ+b+zrP9dmjff96OZJQBsz8wnIuKtwD0RcQVNHC6OiKOBe4FzgNdl5q93vNbG9vvbn+YDAZ32o/nAgNQ1ZyBa0TLzv2g+IXUd8C3aQ1q7WWcHzZvhf0bzA/5NwAmZ+aNZnv53wD/TvMdwS3t7suPxa2lmL/+4i21NAl8GnjfLY18D/h64vJ3N/D7Np7AeBl4BnDxjlRtpDmlNvz/T6TCaMEpd83ogUg9FxIHw5OEqIuIs4JjMPLldHqZ5P2NdZj64i9d4K7BvZr6th+O8g+bjy1/p1TY0eJyBSL31CuCmiDgwIp5L85HezwFExM8Cp9B8+mrWeLQ+DLyyjc2ii4jDgEeNh+bLgEi9dTXNG+X3Af9Gcwjro+1j7wMupvnI7S61H8v9ED99SGqxnEdzGE+aFw9hSZJKnIFIkkoMiCSpxIBIkkoMiCSpxIBIkkoMiCSp5P8BVqbJHhcpe4oAAAAASUVORK5CYII=\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "fig, ax = plt.subplots()\n",
    "\n",
    "ax.plot(energy_grid, energy_grid**2 * func(energy_grid), color=green)\n",
    "\n",
    "\n",
    "ax.set_xlabel(\"energy (keV)\")\n",
    "ax.set_ylabel(r\"$\\nu$F$_{\\nu}$\")\n",
    "ax.set_xscale(x_scale)\n",
    "ax.set_yscale(y_scale)\n"
   ]
  }
 ],
 "metadata": {
  "jupytext": {
   "formats": "ipynb,md"
  },
  "kernelspec": {
   "display_name": "Python 3",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.7.11"
  },
  "papermill": {
   "default_parameters": {},
   "duration": 6.57113,
   "end_time": "2021-08-22T17:29:50.912955",
   "environment_variables": {},
   "exception": null,
   "input_path": "Powerlaw_Eflux.ipynb",
   "output_path": "../docs/notebooks/Powerlaw_Eflux.ipynb",
   "parameters": {
    "func_name": "Powerlaw_Eflux",
    "linear_range": false,
    "wide_energy_range": true,
    "x_scale": "log",
    "y_scale": "log"
   },
   "start_time": "2021-08-22T17:29:44.341825",
   "version": "2.3.3"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 5
}