{
 "cells": [
  {
   "cell_type": "markdown",
   "id": "5e6257d1",
   "metadata": {
    "papermill": {
     "duration": 0.00935,
     "end_time": "2021-08-22T16:54:35.441098",
     "exception": false,
     "start_time": "2021-08-22T16:54:35.431748",
     "status": "completed"
    },
    "tags": []
   },
   "source": [
    "# DMFitFunction"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 1,
   "id": "c7adeaab",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2021-08-22T16:54:35.468163Z",
     "iopub.status.busy": "2021-08-22T16:54:35.467271Z",
     "iopub.status.idle": "2021-08-22T16:54:37.923514Z",
     "shell.execute_reply": "2021-08-22T16:54:37.924112Z"
    },
    "nbsphinx": "hidden",
    "papermill": {
     "duration": 2.474736,
     "end_time": "2021-08-22T16:54:37.924483",
     "exception": false,
     "start_time": "2021-08-22T16:54:35.449747",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "%%capture\n",
    "\n",
    "import numpy as np\n",
    "\n",
    "import matplotlib.pyplot as plt\n",
    "\n",
    "import warnings\n",
    "warnings.simplefilter(\"ignore\")\n",
    "\n",
    "from astromodels.functions.function import _known_functions\n",
    "\n",
    "\n",
    "from jupyterthemes import jtplot\n",
    "jtplot.style(context=\"talk\", fscale=1, ticks=True, grid=False)\n",
    "%matplotlib inline"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 2,
   "id": "aa368a26",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2021-08-22T16:54:37.946833Z",
     "iopub.status.busy": "2021-08-22T16:54:37.945944Z",
     "iopub.status.idle": "2021-08-22T16:54:37.952558Z",
     "shell.execute_reply": "2021-08-22T16:54:37.953081Z"
    },
    "nbsphinx": "hidden",
    "papermill": {
     "duration": 0.02009,
     "end_time": "2021-08-22T16:54:37.953348",
     "exception": false,
     "start_time": "2021-08-22T16:54:37.933258",
     "status": "completed"
    },
    "tags": [
     "parameters"
    ]
   },
   "outputs": [],
   "source": [
    "func_name = \"TbAbs\"\n",
    "\n",
    "x_scale=\"log\"\n",
    "y_scale=\"log\"\n",
    "\n",
    "linear_range = False\n",
    "\n",
    "wide_energy_range = False"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 3,
   "id": "649d80cb",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2021-08-22T16:54:37.975429Z",
     "iopub.status.busy": "2021-08-22T16:54:37.974495Z",
     "iopub.status.idle": "2021-08-22T16:54:37.976951Z",
     "shell.execute_reply": "2021-08-22T16:54:37.977472Z"
    },
    "papermill": {
     "duration": 0.015799,
     "end_time": "2021-08-22T16:54:37.977736",
     "exception": false,
     "start_time": "2021-08-22T16:54:37.961937",
     "status": "completed"
    },
    "tags": [
     "injected-parameters"
    ]
   },
   "outputs": [],
   "source": [
    "# Parameters\n",
    "func_name = \"DMFitFunction\"\n",
    "wide_energy_range = True\n",
    "x_scale = \"log\"\n",
    "y_scale = \"log\"\n",
    "linear_range = False\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 4,
   "id": "d892760a",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2021-08-22T16:54:38.001672Z",
     "iopub.status.busy": "2021-08-22T16:54:38.000778Z",
     "iopub.status.idle": "2021-08-22T16:54:38.055368Z",
     "shell.execute_reply": "2021-08-22T16:54:38.055902Z"
    },
    "lines_to_next_cell": 0,
    "nbsphinx": "hidden",
    "papermill": {
     "duration": 0.069717,
     "end_time": "2021-08-22T16:54:38.056188",
     "exception": false,
     "start_time": "2021-08-22T16:54:37.986471",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "func = _known_functions[func_name]()\n",
    "\n",
    "if wide_energy_range:\n",
    "\n",
    "    energy_grid = np.geomspace(1e2,1e4,500)\n",
    "    \n",
    "else:\n",
    "    \n",
    "    energy_grid = np.geomspace(2e-1,1e1,1000)\n",
    "\n",
    "if linear_range:\n",
    "\n",
    "\tenergy_grid = np.linspace(-5,5,1000)\n",
    "\n",
    "    \n",
    "blue = \"#4152E3\"\n",
    "red = \"#E3414B\"\n",
    "green = \"#41E39E\""
   ]
  },
  {
   "cell_type": "markdown",
   "id": "6ef5f20d",
   "metadata": {
    "lines_to_next_cell": 0,
    "papermill": {
     "duration": 0.00877,
     "end_time": "2021-08-22T16:54:38.074114",
     "exception": false,
     "start_time": "2021-08-22T16:54:38.065344",
     "status": "completed"
    },
    "tags": []
   },
   "source": [
    "## Description"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 5,
   "id": "a310f134",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2021-08-22T16:54:38.103751Z",
     "iopub.status.busy": "2021-08-22T16:54:38.102768Z",
     "iopub.status.idle": "2021-08-22T16:54:38.106438Z",
     "shell.execute_reply": "2021-08-22T16:54:38.106958Z"
    },
    "papermill": {
     "duration": 0.024113,
     "end_time": "2021-08-22T16:54:38.107224",
     "exception": false,
     "start_time": "2021-08-22T16:54:38.083111",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "data": {
      "text/html": [
       "<ul>\n",
       "\n",
       "<li>description: Class that evaluates the spectrum for a DM particle of a given mass, channel, cross section, and J-factor. Based on standard Fermi Science Tools function DMFitFunction. Note input table only calculated spectra up to m_DM of 10 TeV\n",
       "The parameterization is given by\n",
       "F(x) = 1 / (8 * pi) * (1/mass^2) * sigmav * J * dN/dE(E,mass,i)</li>\n",
       "\n",
       "<li>formula: $$</li>\n",
       "\n",
       "<li>parameters: \n",
       "<ul>\n",
       "\n",
       "<li>mass: \n",
       "<ul>\n",
       "\n",
       "<li>value: 10.0</li>\n",
       "\n",
       "<li>desc: DM mass (GeV)</li>\n",
       "\n",
       "<li>min_value: None</li>\n",
       "\n",
       "<li>max_value: None</li>\n",
       "\n",
       "<li>unit: </li>\n",
       "\n",
       "<li>is_normalization: False</li>\n",
       "\n",
       "<li>delta: 1.0</li>\n",
       "\n",
       "<li>free: False</li>\n",
       "\n",
       "</ul>\n",
       "\n",
       "</li>\n",
       "\n",
       "<li>channel: \n",
       "<ul>\n",
       "\n",
       "<li>value: 4.0</li>\n",
       "\n",
       "<li>desc: DM annihilation channel</li>\n",
       "\n",
       "<li>min_value: None</li>\n",
       "\n",
       "<li>max_value: None</li>\n",
       "\n",
       "<li>unit: </li>\n",
       "\n",
       "<li>is_normalization: False</li>\n",
       "\n",
       "<li>delta: 0.4</li>\n",
       "\n",
       "<li>free: False</li>\n",
       "\n",
       "</ul>\n",
       "\n",
       "</li>\n",
       "\n",
       "<li>sigmav: \n",
       "<ul>\n",
       "\n",
       "<li>value: 1e-26</li>\n",
       "\n",
       "<li>desc: DM annihilation cross section (cm^3/s)</li>\n",
       "\n",
       "<li>min_value: None</li>\n",
       "\n",
       "<li>max_value: None</li>\n",
       "\n",
       "<li>unit: </li>\n",
       "\n",
       "<li>is_normalization: False</li>\n",
       "\n",
       "<li>delta: 1e-27</li>\n",
       "\n",
       "<li>free: True</li>\n",
       "\n",
       "</ul>\n",
       "\n",
       "</li>\n",
       "\n",
       "<li>J: \n",
       "<ul>\n",
       "\n",
       "<li>value: 1e+20</li>\n",
       "\n",
       "<li>desc: Target total J-factor (GeV^2 cm^-5)</li>\n",
       "\n",
       "<li>min_value: None</li>\n",
       "\n",
       "<li>max_value: None</li>\n",
       "\n",
       "<li>unit: </li>\n",
       "\n",
       "<li>is_normalization: False</li>\n",
       "\n",
       "<li>delta: 1e+19</li>\n",
       "\n",
       "<li>free: False</li>\n",
       "\n",
       "</ul>\n",
       "\n",
       "</li>\n",
       "\n",
       "</ul>\n",
       "\n",
       "</li>\n",
       "\n",
       "</ul>\n"
      ],
      "text/plain": [
       "  * description: 'Class that evaluates the spectrum for a DM particle of a given mass,\n",
       "    * channel, cross section, and J-factor. Based on standard Fermi Science Tools function\n",
       "    * DMFitFunction. Note input table only calculated spectra up to m_DM of 10 TeV\n",
       "\n",
       "    * The parameterization is given by\n",
       "\n",
       "    * F(x) = 1 / (8 * pi) * (1/mass^2) * sigmav * J * dN/dE(E,mass,i)'\n",
       "  * formula: $$\n",
       "  * parameters:\n",
       "    * mass:\n",
       "      * value: 10.0\n",
       "      * desc: DM mass (GeV)\n",
       "      * min_value: null\n",
       "      * max_value: null\n",
       "      * unit: ''\n",
       "      * is_normalization: false\n",
       "      * delta: 1.0\n",
       "      * free: false\n",
       "    * channel:\n",
       "      * value: 4.0\n",
       "      * desc: DM annihilation channel\n",
       "      * min_value: null\n",
       "      * max_value: null\n",
       "      * unit: ''\n",
       "      * is_normalization: false\n",
       "      * delta: 0.4\n",
       "      * free: false\n",
       "    * sigmav:\n",
       "      * value: 1.0e-26\n",
       "      * desc: DM annihilation cross section (cm^3/s)\n",
       "      * min_value: null\n",
       "      * max_value: null\n",
       "      * unit: ''\n",
       "      * is_normalization: false\n",
       "      * delta: 1.0e-27\n",
       "      * free: true\n",
       "    * J:\n",
       "      * value: 1.0e+20\n",
       "      * desc: Target total J-factor (GeV^2 cm^-5)\n",
       "      * min_value: null\n",
       "      * max_value: null\n",
       "      * unit: ''\n",
       "      * is_normalization: false\n",
       "      * delta: 1.0e+19\n",
       "      * free: false"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "func.display()"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "aa590855",
   "metadata": {
    "papermill": {
     "duration": 0.009504,
     "end_time": "2021-08-22T16:54:38.126440",
     "exception": false,
     "start_time": "2021-08-22T16:54:38.116936",
     "status": "completed"
    },
    "tags": []
   },
   "source": [
    "## Shape \n",
    "\n",
    "The shape of the function. \n",
    "\n",
    "*If this is not a photon model but a prior or linear function then ignore the units as these docs are auto-generated*"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 6,
   "id": "57a225b5",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2021-08-22T16:54:38.246953Z",
     "iopub.status.busy": "2021-08-22T16:54:38.157260Z",
     "iopub.status.idle": "2021-08-22T16:54:39.064957Z",
     "shell.execute_reply": "2021-08-22T16:54:39.065487Z"
    },
    "papermill": {
     "duration": 0.929664,
     "end_time": "2021-08-22T16:54:39.065764",
     "exception": false,
     "start_time": "2021-08-22T16:54:38.136100",
     "status": "completed"
    },
    "tags": [
     "nbsphinx-thumbnail"
    ]
   },
   "outputs": [
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "fig, ax = plt.subplots()\n",
    "\n",
    "\n",
    "ax.plot(energy_grid, func(energy_grid), color=blue)\n",
    "\n",
    "ax.set_xlabel(\"energy (keV)\")\n",
    "ax.set_ylabel(\"photon flux\")\n",
    "ax.set_xscale(x_scale)\n",
    "ax.set_yscale(y_scale)\n"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "9f75a6de",
   "metadata": {
    "lines_to_next_cell": 0,
    "papermill": {
     "duration": 0.010752,
     "end_time": "2021-08-22T16:54:39.087338",
     "exception": false,
     "start_time": "2021-08-22T16:54:39.076586",
     "status": "completed"
    },
    "tags": []
   },
   "source": [
    "## F$_{\\nu}$\n",
    "\n",
    "The F$_{\\nu}$ shape of the photon model\n",
    "*if this is not a photon model, please ignore this auto-generated plot*"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 7,
   "id": "e86613f5",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2021-08-22T16:54:39.253020Z",
     "iopub.status.busy": "2021-08-22T16:54:39.135193Z",
     "iopub.status.idle": "2021-08-22T16:54:39.988428Z",
     "shell.execute_reply": "2021-08-22T16:54:39.989315Z"
    },
    "papermill": {
     "duration": 0.891888,
     "end_time": "2021-08-22T16:54:39.989589",
     "exception": false,
     "start_time": "2021-08-22T16:54:39.097701",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "fig, ax = plt.subplots()\n",
    "\n",
    "ax.plot(energy_grid, energy_grid * func(energy_grid), red)\n",
    "\n",
    "\n",
    "ax.set_xlabel(\"energy (keV)\")\n",
    "ax.set_ylabel(r\"energy flux (F$_{\\nu}$)\")\n",
    "ax.set_xscale(x_scale)\n",
    "ax.set_yscale(y_scale)\n",
    "\n"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "04c8f789",
   "metadata": {
    "papermill": {
     "duration": 0.011388,
     "end_time": "2021-08-22T16:54:40.012704",
     "exception": false,
     "start_time": "2021-08-22T16:54:40.001316",
     "status": "completed"
    },
    "tags": []
   },
   "source": [
    "## $\\nu$F$_{\\nu}$\n",
    "\n",
    "The $\\nu$F$_{\\nu}$ shape of the photon model\n",
    "*if this is not a photon model, please ignore this auto-generated plot*"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 8,
   "id": "f772fde4",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2021-08-22T16:54:40.043281Z",
     "iopub.status.busy": "2021-08-22T16:54:40.042135Z",
     "iopub.status.idle": "2021-08-22T16:54:40.931317Z",
     "shell.execute_reply": "2021-08-22T16:54:40.932273Z"
    },
    "papermill": {
     "duration": 0.908546,
     "end_time": "2021-08-22T16:54:40.932554",
     "exception": false,
     "start_time": "2021-08-22T16:54:40.024008",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "fig, ax = plt.subplots()\n",
    "\n",
    "ax.plot(energy_grid, energy_grid**2 * func(energy_grid), color=green)\n",
    "\n",
    "\n",
    "ax.set_xlabel(\"energy (keV)\")\n",
    "ax.set_ylabel(r\"$\\nu$F$_{\\nu}$\")\n",
    "ax.set_xscale(x_scale)\n",
    "ax.set_yscale(y_scale)\n"
   ]
  }
 ],
 "metadata": {
  "jupytext": {
   "formats": "ipynb,md"
  },
  "kernelspec": {
   "display_name": "Python 3",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.7.11"
  },
  "papermill": {
   "default_parameters": {},
   "duration": 6.975849,
   "end_time": "2021-08-22T16:54:41.519877",
   "environment_variables": {},
   "exception": null,
   "input_path": "DMFitFunction.ipynb",
   "output_path": "../docs/notebooks/DMFitFunction.ipynb",
   "parameters": {
    "func_name": "DMFitFunction",
    "linear_range": false,
    "wide_energy_range": true,
    "x_scale": "log",
    "y_scale": "log"
   },
   "start_time": "2021-08-22T16:54:34.544028",
   "version": "2.3.3"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 5
}