{
 "cells": [
  {
   "cell_type": "markdown",
   "id": "c87ddf6d",
   "metadata": {
    "papermill": {
     "duration": 0.009659,
     "end_time": "2021-08-22T17:09:00.606864",
     "exception": false,
     "start_time": "2021-08-22T17:09:00.597205",
     "status": "completed"
    },
    "tags": []
   },
   "source": [
    "# Band Calderone"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 1,
   "id": "c01dda80",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2021-08-22T17:09:00.633809Z",
     "iopub.status.busy": "2021-08-22T17:09:00.632922Z",
     "iopub.status.idle": "2021-08-22T17:09:03.086637Z",
     "shell.execute_reply": "2021-08-22T17:09:03.087237Z"
    },
    "nbsphinx": "hidden",
    "papermill": {
     "duration": 2.472123,
     "end_time": "2021-08-22T17:09:03.087599",
     "exception": false,
     "start_time": "2021-08-22T17:09:00.615476",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "%%capture\n",
    "\n",
    "import numpy as np\n",
    "\n",
    "import matplotlib.pyplot as plt\n",
    "\n",
    "import warnings\n",
    "warnings.simplefilter(\"ignore\")\n",
    "\n",
    "from astromodels.functions.function import _known_functions\n",
    "\n",
    "\n",
    "from jupyterthemes import jtplot\n",
    "jtplot.style(context=\"talk\", fscale=1, ticks=True, grid=False)\n",
    "%matplotlib inline"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 2,
   "id": "ef677ff8",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2021-08-22T17:09:03.109920Z",
     "iopub.status.busy": "2021-08-22T17:09:03.109036Z",
     "iopub.status.idle": "2021-08-22T17:09:03.114276Z",
     "shell.execute_reply": "2021-08-22T17:09:03.114854Z"
    },
    "nbsphinx": "hidden",
    "papermill": {
     "duration": 0.018815,
     "end_time": "2021-08-22T17:09:03.115120",
     "exception": false,
     "start_time": "2021-08-22T17:09:03.096305",
     "status": "completed"
    },
    "tags": [
     "parameters"
    ]
   },
   "outputs": [],
   "source": [
    "func_name = \"TbAbs\"\n",
    "\n",
    "x_scale=\"log\"\n",
    "y_scale=\"log\"\n",
    "\n",
    "linear_range = False\n",
    "\n",
    "wide_energy_range = False"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 3,
   "id": "31aa4867",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2021-08-22T17:09:03.137235Z",
     "iopub.status.busy": "2021-08-22T17:09:03.136352Z",
     "iopub.status.idle": "2021-08-22T17:09:03.142820Z",
     "shell.execute_reply": "2021-08-22T17:09:03.143398Z"
    },
    "papermill": {
     "duration": 0.020048,
     "end_time": "2021-08-22T17:09:03.143667",
     "exception": false,
     "start_time": "2021-08-22T17:09:03.123619",
     "status": "completed"
    },
    "tags": [
     "injected-parameters"
    ]
   },
   "outputs": [],
   "source": [
    "# Parameters\n",
    "func_name = \"Band_Calderone\"\n",
    "wide_energy_range = True\n",
    "x_scale = \"log\"\n",
    "y_scale = \"log\"\n",
    "linear_range = False\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 4,
   "id": "0fb42862",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2021-08-22T17:09:03.168130Z",
     "iopub.status.busy": "2021-08-22T17:09:03.167242Z",
     "iopub.status.idle": "2021-08-22T17:09:03.173797Z",
     "shell.execute_reply": "2021-08-22T17:09:03.174397Z"
    },
    "lines_to_next_cell": 0,
    "nbsphinx": "hidden",
    "papermill": {
     "duration": 0.022369,
     "end_time": "2021-08-22T17:09:03.174667",
     "exception": false,
     "start_time": "2021-08-22T17:09:03.152298",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "func = _known_functions[func_name]()\n",
    "\n",
    "if wide_energy_range:\n",
    "\n",
    "    energy_grid = np.geomspace(1e2,1e4,500)\n",
    "    \n",
    "else:\n",
    "    \n",
    "    energy_grid = np.geomspace(2e-1,1e1,1000)\n",
    "\n",
    "if linear_range:\n",
    "\n",
    "\tenergy_grid = np.linspace(-5,5,1000)\n",
    "\n",
    "    \n",
    "blue = \"#4152E3\"\n",
    "red = \"#E3414B\"\n",
    "green = \"#41E39E\""
   ]
  },
  {
   "cell_type": "markdown",
   "id": "7651e564",
   "metadata": {
    "lines_to_next_cell": 0,
    "papermill": {
     "duration": 0.008574,
     "end_time": "2021-08-22T17:09:03.191938",
     "exception": false,
     "start_time": "2021-08-22T17:09:03.183364",
     "status": "completed"
    },
    "tags": []
   },
   "source": [
    "## Description"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 5,
   "id": "77077c14",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2021-08-22T17:09:03.223282Z",
     "iopub.status.busy": "2021-08-22T17:09:03.222350Z",
     "iopub.status.idle": "2021-08-22T17:09:03.230015Z",
     "shell.execute_reply": "2021-08-22T17:09:03.230908Z"
    },
    "papermill": {
     "duration": 0.030265,
     "end_time": "2021-08-22T17:09:03.231184",
     "exception": false,
     "start_time": "2021-08-22T17:09:03.200919",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "data": {
      "text/html": [
       "<ul>\n",
       "\n",
       "<li>description: The Band model from Band et al. 1993, implemented however in a way which reduces the covariances between the parameters (Calderone et al., MNRAS, 448, 403C, 2015)</li>\n",
       "\n",
       "<li>formula: $ \\text{(Calderone et al., MNRAS, 448, 403C, 2015)} $</li>\n",
       "\n",
       "<li>parameters: \n",
       "<ul>\n",
       "\n",
       "<li>alpha: \n",
       "<ul>\n",
       "\n",
       "<li>value: -1.0</li>\n",
       "\n",
       "<li>desc: The index for x smaller than the x peak</li>\n",
       "\n",
       "<li>min_value: -10.0</li>\n",
       "\n",
       "<li>max_value: 10.0</li>\n",
       "\n",
       "<li>unit: </li>\n",
       "\n",
       "<li>is_normalization: False</li>\n",
       "\n",
       "<li>delta: 0.1</li>\n",
       "\n",
       "<li>free: True</li>\n",
       "\n",
       "</ul>\n",
       "\n",
       "</li>\n",
       "\n",
       "<li>beta: \n",
       "<ul>\n",
       "\n",
       "<li>value: -2.2</li>\n",
       "\n",
       "<li>desc: index for x greater than the x peak (only if opt=1, i.e., for the Band model)</li>\n",
       "\n",
       "<li>min_value: -7.0</li>\n",
       "\n",
       "<li>max_value: -1.0</li>\n",
       "\n",
       "<li>unit: </li>\n",
       "\n",
       "<li>is_normalization: False</li>\n",
       "\n",
       "<li>delta: 0.22000000000000003</li>\n",
       "\n",
       "<li>free: True</li>\n",
       "\n",
       "</ul>\n",
       "\n",
       "</li>\n",
       "\n",
       "<li>xp: \n",
       "<ul>\n",
       "\n",
       "<li>value: 200.0</li>\n",
       "\n",
       "<li>desc: position of the peak in the x*x*f(x) space (if x is energy, this is the nuFnu or SED space)</li>\n",
       "\n",
       "<li>min_value: 0.0</li>\n",
       "\n",
       "<li>max_value: None</li>\n",
       "\n",
       "<li>unit: </li>\n",
       "\n",
       "<li>is_normalization: False</li>\n",
       "\n",
       "<li>delta: 20.0</li>\n",
       "\n",
       "<li>free: True</li>\n",
       "\n",
       "</ul>\n",
       "\n",
       "</li>\n",
       "\n",
       "<li>F: \n",
       "<ul>\n",
       "\n",
       "<li>value: 1e-06</li>\n",
       "\n",
       "<li>desc: integral in the band defined by a and b</li>\n",
       "\n",
       "<li>min_value: None</li>\n",
       "\n",
       "<li>max_value: None</li>\n",
       "\n",
       "<li>unit: </li>\n",
       "\n",
       "<li>is_normalization: True</li>\n",
       "\n",
       "<li>delta: 1e-07</li>\n",
       "\n",
       "<li>free: True</li>\n",
       "\n",
       "</ul>\n",
       "\n",
       "</li>\n",
       "\n",
       "<li>a: \n",
       "<ul>\n",
       "\n",
       "<li>value: 1.0</li>\n",
       "\n",
       "<li>desc: lower limit of the band in which the integral will be computed</li>\n",
       "\n",
       "<li>min_value: 0.0</li>\n",
       "\n",
       "<li>max_value: None</li>\n",
       "\n",
       "<li>unit: </li>\n",
       "\n",
       "<li>is_normalization: False</li>\n",
       "\n",
       "<li>delta: 0.1</li>\n",
       "\n",
       "<li>free: False</li>\n",
       "\n",
       "</ul>\n",
       "\n",
       "</li>\n",
       "\n",
       "<li>b: \n",
       "<ul>\n",
       "\n",
       "<li>value: 10000.0</li>\n",
       "\n",
       "<li>desc: upper limit of the band in which the integral will be computed</li>\n",
       "\n",
       "<li>min_value: 0.0</li>\n",
       "\n",
       "<li>max_value: None</li>\n",
       "\n",
       "<li>unit: </li>\n",
       "\n",
       "<li>is_normalization: False</li>\n",
       "\n",
       "<li>delta: 1000.0</li>\n",
       "\n",
       "<li>free: False</li>\n",
       "\n",
       "</ul>\n",
       "\n",
       "</li>\n",
       "\n",
       "<li>opt: \n",
       "<ul>\n",
       "\n",
       "<li>value: 1.0</li>\n",
       "\n",
       "<li>desc: option to select the spectral model (0 corresponds to a cutoff power law, 1 to the Band model)</li>\n",
       "\n",
       "<li>min_value: 0.0</li>\n",
       "\n",
       "<li>max_value: 1.0</li>\n",
       "\n",
       "<li>unit: </li>\n",
       "\n",
       "<li>is_normalization: False</li>\n",
       "\n",
       "<li>delta: 0.1</li>\n",
       "\n",
       "<li>free: False</li>\n",
       "\n",
       "</ul>\n",
       "\n",
       "</li>\n",
       "\n",
       "</ul>\n",
       "\n",
       "</li>\n",
       "\n",
       "</ul>\n"
      ],
      "text/plain": [
       "  * description: The Band model from Band et al. 1993, implemented however in a way which\n",
       "    * reduces the covariances between the parameters (Calderone et al., MNRAS, 448, 403C,\n",
       "    * 2015)\n",
       "  * formula: $ \\text{(Calderone et al., MNRAS, 448, 403C, 2015)} $\n",
       "  * parameters:\n",
       "    * alpha:\n",
       "      * value: -1.0\n",
       "      * desc: The index for x smaller than the x peak\n",
       "      * min_value: -10.0\n",
       "      * max_value: 10.0\n",
       "      * unit: ''\n",
       "      * is_normalization: false\n",
       "      * delta: 0.1\n",
       "      * free: true\n",
       "    * beta:\n",
       "      * value: -2.2\n",
       "      * desc: index for x greater than the x peak (only if opt=1, i.e., for the Band model)\n",
       "      * min_value: -7.0\n",
       "      * max_value: -1.0\n",
       "      * unit: ''\n",
       "      * is_normalization: false\n",
       "      * delta: 0.22000000000000003\n",
       "      * free: true\n",
       "    * xp:\n",
       "      * value: 200.0\n",
       "      * desc: position of the peak in the x*x*f(x) space (if x is energy, this is the\n",
       "        * nuFnu or SED space)\n",
       "      * min_value: 0.0\n",
       "      * max_value: null\n",
       "      * unit: ''\n",
       "      * is_normalization: false\n",
       "      * delta: 20.0\n",
       "      * free: true\n",
       "    * F:\n",
       "      * value: 1.0e-06\n",
       "      * desc: integral in the band defined by a and b\n",
       "      * min_value: null\n",
       "      * max_value: null\n",
       "      * unit: ''\n",
       "      * is_normalization: true\n",
       "      * delta: 1.0e-07\n",
       "      * free: true\n",
       "    * a:\n",
       "      * value: 1.0\n",
       "      * desc: lower limit of the band in which the integral will be computed\n",
       "      * min_value: 0.0\n",
       "      * max_value: null\n",
       "      * unit: ''\n",
       "      * is_normalization: false\n",
       "      * delta: 0.1\n",
       "      * free: false\n",
       "    * b:\n",
       "      * value: 10000.0\n",
       "      * desc: upper limit of the band in which the integral will be computed\n",
       "      * min_value: 0.0\n",
       "      * max_value: null\n",
       "      * unit: ''\n",
       "      * is_normalization: false\n",
       "      * delta: 1000.0\n",
       "      * free: false\n",
       "    * opt:\n",
       "      * value: 1.0\n",
       "      * desc: option to select the spectral model (0 corresponds to a cutoff power law,\n",
       "        * 1 to the Band model)\n",
       "      * min_value: 0.0\n",
       "      * max_value: 1.0\n",
       "      * unit: ''\n",
       "      * is_normalization: false\n",
       "      * delta: 0.1\n",
       "      * free: false"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "func.display()"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "b4d340f9",
   "metadata": {
    "papermill": {
     "duration": 0.009595,
     "end_time": "2021-08-22T17:09:03.250501",
     "exception": false,
     "start_time": "2021-08-22T17:09:03.240906",
     "status": "completed"
    },
    "tags": []
   },
   "source": [
    "## Shape \n",
    "\n",
    "The shape of the function. \n",
    "\n",
    "*If this is not a photon model but a prior or linear function then ignore the units as these docs are auto-generated*"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 6,
   "id": "009e1507",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2021-08-22T17:09:03.297034Z",
     "iopub.status.busy": "2021-08-22T17:09:03.277265Z",
     "iopub.status.idle": "2021-08-22T17:09:04.604058Z",
     "shell.execute_reply": "2021-08-22T17:09:04.605068Z"
    },
    "papermill": {
     "duration": 1.345167,
     "end_time": "2021-08-22T17:09:04.605362",
     "exception": false,
     "start_time": "2021-08-22T17:09:03.260195",
     "status": "completed"
    },
    "tags": [
     "nbsphinx-thumbnail"
    ]
   },
   "outputs": [
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "fig, ax = plt.subplots()\n",
    "\n",
    "\n",
    "ax.plot(energy_grid, func(energy_grid), color=blue)\n",
    "\n",
    "ax.set_xlabel(\"energy (keV)\")\n",
    "ax.set_ylabel(\"photon flux\")\n",
    "ax.set_xscale(x_scale)\n",
    "ax.set_yscale(y_scale)\n"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "e169ab5c",
   "metadata": {
    "lines_to_next_cell": 0,
    "papermill": {
     "duration": 0.010553,
     "end_time": "2021-08-22T17:09:04.626860",
     "exception": false,
     "start_time": "2021-08-22T17:09:04.616307",
     "status": "completed"
    },
    "tags": []
   },
   "source": [
    "## F$_{\\nu}$\n",
    "\n",
    "The F$_{\\nu}$ shape of the photon model\n",
    "*if this is not a photon model, please ignore this auto-generated plot*"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 7,
   "id": "333eae6e",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2021-08-22T17:09:04.656979Z",
     "iopub.status.busy": "2021-08-22T17:09:04.655350Z",
     "iopub.status.idle": "2021-08-22T17:09:05.308225Z",
     "shell.execute_reply": "2021-08-22T17:09:05.308956Z"
    },
    "papermill": {
     "duration": 0.671597,
     "end_time": "2021-08-22T17:09:05.309244",
     "exception": false,
     "start_time": "2021-08-22T17:09:04.637647",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "fig, ax = plt.subplots()\n",
    "\n",
    "ax.plot(energy_grid, energy_grid * func(energy_grid), red)\n",
    "\n",
    "\n",
    "ax.set_xlabel(\"energy (keV)\")\n",
    "ax.set_ylabel(r\"energy flux (F$_{\\nu}$)\")\n",
    "ax.set_xscale(x_scale)\n",
    "ax.set_yscale(y_scale)\n",
    "\n"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "7702a738",
   "metadata": {
    "papermill": {
     "duration": 0.011362,
     "end_time": "2021-08-22T17:09:05.333336",
     "exception": false,
     "start_time": "2021-08-22T17:09:05.321974",
     "status": "completed"
    },
    "tags": []
   },
   "source": [
    "## $\\nu$F$_{\\nu}$\n",
    "\n",
    "The $\\nu$F$_{\\nu}$ shape of the photon model\n",
    "*if this is not a photon model, please ignore this auto-generated plot*"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 8,
   "id": "dc5d3f7d",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2021-08-22T17:09:05.400972Z",
     "iopub.status.busy": "2021-08-22T17:09:05.363526Z",
     "iopub.status.idle": "2021-08-22T17:09:05.926908Z",
     "shell.execute_reply": "2021-08-22T17:09:05.927540Z"
    },
    "papermill": {
     "duration": 0.58309,
     "end_time": "2021-08-22T17:09:05.927820",
     "exception": false,
     "start_time": "2021-08-22T17:09:05.344730",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "fig, ax = plt.subplots()\n",
    "\n",
    "ax.plot(energy_grid, energy_grid**2 * func(energy_grid), color=green)\n",
    "\n",
    "\n",
    "ax.set_xlabel(\"energy (keV)\")\n",
    "ax.set_ylabel(r\"$\\nu$F$_{\\nu}$\")\n",
    "ax.set_xscale(x_scale)\n",
    "ax.set_yscale(y_scale)\n"
   ]
  }
 ],
 "metadata": {
  "jupytext": {
   "formats": "ipynb,md"
  },
  "kernelspec": {
   "display_name": "Python 3",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.7.11"
  },
  "papermill": {
   "default_parameters": {},
   "duration": 6.661396,
   "end_time": "2021-08-22T17:09:06.420448",
   "environment_variables": {},
   "exception": null,
   "input_path": "Band_Calderone.ipynb",
   "output_path": "../docs/notebooks/Band_Calderone.ipynb",
   "parameters": {
    "func_name": "Band_Calderone",
    "linear_range": false,
    "wide_energy_range": true,
    "x_scale": "log",
    "y_scale": "log"
   },
   "start_time": "2021-08-22T17:08:59.759052",
   "version": "2.3.3"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 5
}