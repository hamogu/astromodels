{
 "cells": [
  {
   "cell_type": "markdown",
   "id": "5e3aa03c",
   "metadata": {
    "papermill": {
     "duration": 0.010249,
     "end_time": "2021-08-22T17:28:22.894615",
     "exception": false,
     "start_time": "2021-08-22T17:28:22.884366",
     "status": "completed"
    },
    "tags": []
   },
   "source": [
    "# Log parabola"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 1,
   "id": "2c3c5061",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2021-08-22T17:28:22.921357Z",
     "iopub.status.busy": "2021-08-22T17:28:22.920462Z",
     "iopub.status.idle": "2021-08-22T17:28:25.429581Z",
     "shell.execute_reply": "2021-08-22T17:28:25.430165Z"
    },
    "nbsphinx": "hidden",
    "papermill": {
     "duration": 2.527298,
     "end_time": "2021-08-22T17:28:25.430507",
     "exception": false,
     "start_time": "2021-08-22T17:28:22.903209",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "%%capture\n",
    "\n",
    "import numpy as np\n",
    "\n",
    "import matplotlib.pyplot as plt\n",
    "\n",
    "import warnings\n",
    "warnings.simplefilter(\"ignore\")\n",
    "\n",
    "from astromodels.functions.function import _known_functions\n",
    "\n",
    "\n",
    "from jupyterthemes import jtplot\n",
    "jtplot.style(context=\"talk\", fscale=1, ticks=True, grid=False)\n",
    "%matplotlib inline"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 2,
   "id": "7a078fbc",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2021-08-22T17:28:25.458374Z",
     "iopub.status.busy": "2021-08-22T17:28:25.456892Z",
     "iopub.status.idle": "2021-08-22T17:28:25.460884Z",
     "shell.execute_reply": "2021-08-22T17:28:25.461442Z"
    },
    "nbsphinx": "hidden",
    "papermill": {
     "duration": 0.022445,
     "end_time": "2021-08-22T17:28:25.461700",
     "exception": false,
     "start_time": "2021-08-22T17:28:25.439255",
     "status": "completed"
    },
    "tags": [
     "parameters"
    ]
   },
   "outputs": [],
   "source": [
    "func_name = \"TbAbs\"\n",
    "\n",
    "x_scale=\"log\"\n",
    "y_scale=\"log\"\n",
    "\n",
    "linear_range = False\n",
    "\n",
    "wide_energy_range = False"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 3,
   "id": "a07fc306",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2021-08-22T17:28:25.485224Z",
     "iopub.status.busy": "2021-08-22T17:28:25.484094Z",
     "iopub.status.idle": "2021-08-22T17:28:25.486889Z",
     "shell.execute_reply": "2021-08-22T17:28:25.487537Z"
    },
    "papermill": {
     "duration": 0.019442,
     "end_time": "2021-08-22T17:28:25.489939",
     "exception": false,
     "start_time": "2021-08-22T17:28:25.470497",
     "status": "completed"
    },
    "tags": [
     "injected-parameters"
    ]
   },
   "outputs": [],
   "source": [
    "# Parameters\n",
    "func_name = \"Log_parabola\"\n",
    "wide_energy_range = True\n",
    "x_scale = \"log\"\n",
    "y_scale = \"log\"\n",
    "linear_range = False\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 4,
   "id": "661652da",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2021-08-22T17:28:25.516442Z",
     "iopub.status.busy": "2021-08-22T17:28:25.515180Z",
     "iopub.status.idle": "2021-08-22T17:28:25.518871Z",
     "shell.execute_reply": "2021-08-22T17:28:25.518255Z"
    },
    "lines_to_next_cell": 0,
    "nbsphinx": "hidden",
    "papermill": {
     "duration": 0.019783,
     "end_time": "2021-08-22T17:28:25.519158",
     "exception": false,
     "start_time": "2021-08-22T17:28:25.499375",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "func = _known_functions[func_name]()\n",
    "\n",
    "if wide_energy_range:\n",
    "\n",
    "    energy_grid = np.geomspace(1e2,1e4,500)\n",
    "    \n",
    "else:\n",
    "    \n",
    "    energy_grid = np.geomspace(2e-1,1e1,1000)\n",
    "\n",
    "if linear_range:\n",
    "\n",
    "\tenergy_grid = np.linspace(-5,5,1000)\n",
    "\n",
    "    \n",
    "blue = \"#4152E3\"\n",
    "red = \"#E3414B\"\n",
    "green = \"#41E39E\""
   ]
  },
  {
   "cell_type": "markdown",
   "id": "193f7edc",
   "metadata": {
    "lines_to_next_cell": 0,
    "papermill": {
     "duration": 0.008653,
     "end_time": "2021-08-22T17:28:25.536846",
     "exception": false,
     "start_time": "2021-08-22T17:28:25.528193",
     "status": "completed"
    },
    "tags": []
   },
   "source": [
    "## Description"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 5,
   "id": "6e0cd241",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2021-08-22T17:28:25.566028Z",
     "iopub.status.busy": "2021-08-22T17:28:25.565086Z",
     "iopub.status.idle": "2021-08-22T17:28:25.568797Z",
     "shell.execute_reply": "2021-08-22T17:28:25.569517Z"
    },
    "papermill": {
     "duration": 0.023918,
     "end_time": "2021-08-22T17:28:25.569770",
     "exception": false,
     "start_time": "2021-08-22T17:28:25.545852",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "data": {
      "text/html": [
       "<ul>\n",
       "\n",
       "<li>description: A log-parabolic function. NOTE that we use the high-energy convention of using the natural log in place of the base-10 logarithm. This means that beta is a factor 1 / log10(e) larger than what returned by those software using the other convention.</li>\n",
       "\n",
       "<li>formula: $ K \\left( \\frac{x}{piv} \\right)^{\\alpha -\\beta \\log{\\left( \\frac{x}{piv} \\right)}} $</li>\n",
       "\n",
       "<li>parameters: \n",
       "<ul>\n",
       "\n",
       "<li>K: \n",
       "<ul>\n",
       "\n",
       "<li>value: 1.0</li>\n",
       "\n",
       "<li>desc: Normalization</li>\n",
       "\n",
       "<li>min_value: 1e-30</li>\n",
       "\n",
       "<li>max_value: 100000.0</li>\n",
       "\n",
       "<li>unit: </li>\n",
       "\n",
       "<li>is_normalization: True</li>\n",
       "\n",
       "<li>delta: 0.1</li>\n",
       "\n",
       "<li>free: True</li>\n",
       "\n",
       "</ul>\n",
       "\n",
       "</li>\n",
       "\n",
       "<li>piv: \n",
       "<ul>\n",
       "\n",
       "<li>value: 1.0</li>\n",
       "\n",
       "<li>desc: Pivot (keep this fixed)</li>\n",
       "\n",
       "<li>min_value: None</li>\n",
       "\n",
       "<li>max_value: None</li>\n",
       "\n",
       "<li>unit: </li>\n",
       "\n",
       "<li>is_normalization: False</li>\n",
       "\n",
       "<li>delta: 0.1</li>\n",
       "\n",
       "<li>free: False</li>\n",
       "\n",
       "</ul>\n",
       "\n",
       "</li>\n",
       "\n",
       "<li>alpha: \n",
       "<ul>\n",
       "\n",
       "<li>value: -2.0</li>\n",
       "\n",
       "<li>desc: index</li>\n",
       "\n",
       "<li>min_value: None</li>\n",
       "\n",
       "<li>max_value: None</li>\n",
       "\n",
       "<li>unit: </li>\n",
       "\n",
       "<li>is_normalization: False</li>\n",
       "\n",
       "<li>delta: 0.2</li>\n",
       "\n",
       "<li>free: True</li>\n",
       "\n",
       "</ul>\n",
       "\n",
       "</li>\n",
       "\n",
       "<li>beta: \n",
       "<ul>\n",
       "\n",
       "<li>value: 1.0</li>\n",
       "\n",
       "<li>desc: curvature (positive is concave, negative is convex)</li>\n",
       "\n",
       "<li>min_value: None</li>\n",
       "\n",
       "<li>max_value: None</li>\n",
       "\n",
       "<li>unit: </li>\n",
       "\n",
       "<li>is_normalization: False</li>\n",
       "\n",
       "<li>delta: 0.1</li>\n",
       "\n",
       "<li>free: True</li>\n",
       "\n",
       "</ul>\n",
       "\n",
       "</li>\n",
       "\n",
       "</ul>\n",
       "\n",
       "</li>\n",
       "\n",
       "</ul>\n"
      ],
      "text/plain": [
       "  * description: A log-parabolic function. NOTE that we use the high-energy convention\n",
       "    * of using the natural log in place of the base-10 logarithm. This means that beta\n",
       "    * is a factor 1 / log10(e) larger than what returned by those software using the other\n",
       "    * convention.\n",
       "  * formula: $ K \\left( \\frac{x}{piv} \\right)^{\\alpha -\\beta \\log{\\left( \\frac{x}{piv}\n",
       "    * \\right)}} $\n",
       "  * parameters:\n",
       "    * K:\n",
       "      * value: 1.0\n",
       "      * desc: Normalization\n",
       "      * min_value: 1.0e-30\n",
       "      * max_value: 100000.0\n",
       "      * unit: ''\n",
       "      * is_normalization: true\n",
       "      * delta: 0.1\n",
       "      * free: true\n",
       "    * piv:\n",
       "      * value: 1.0\n",
       "      * desc: Pivot (keep this fixed)\n",
       "      * min_value: null\n",
       "      * max_value: null\n",
       "      * unit: ''\n",
       "      * is_normalization: false\n",
       "      * delta: 0.1\n",
       "      * free: false\n",
       "    * alpha:\n",
       "      * value: -2.0\n",
       "      * desc: index\n",
       "      * min_value: null\n",
       "      * max_value: null\n",
       "      * unit: ''\n",
       "      * is_normalization: false\n",
       "      * delta: 0.2\n",
       "      * free: true\n",
       "    * beta:\n",
       "      * value: 1.0\n",
       "      * desc: curvature (positive is concave, negative is convex)\n",
       "      * min_value: null\n",
       "      * max_value: null\n",
       "      * unit: ''\n",
       "      * is_normalization: false\n",
       "      * delta: 0.1\n",
       "      * free: true"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "func.display()"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "b0500fba",
   "metadata": {
    "papermill": {
     "duration": 0.00932,
     "end_time": "2021-08-22T17:28:25.588464",
     "exception": false,
     "start_time": "2021-08-22T17:28:25.579144",
     "status": "completed"
    },
    "tags": []
   },
   "source": [
    "## Shape \n",
    "\n",
    "The shape of the function. \n",
    "\n",
    "*If this is not a photon model but a prior or linear function then ignore the units as these docs are auto-generated*"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 6,
   "id": "14e2762c",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2021-08-22T17:28:25.650382Z",
     "iopub.status.busy": "2021-08-22T17:28:25.614500Z",
     "iopub.status.idle": "2021-08-22T17:28:26.517360Z",
     "shell.execute_reply": "2021-08-22T17:28:26.518053Z"
    },
    "papermill": {
     "duration": 0.920342,
     "end_time": "2021-08-22T17:28:26.518352",
     "exception": false,
     "start_time": "2021-08-22T17:28:25.598010",
     "status": "completed"
    },
    "tags": [
     "nbsphinx-thumbnail"
    ]
   },
   "outputs": [
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "fig, ax = plt.subplots()\n",
    "\n",
    "\n",
    "ax.plot(energy_grid, func(energy_grid), color=blue)\n",
    "\n",
    "ax.set_xlabel(\"energy (keV)\")\n",
    "ax.set_ylabel(\"photon flux\")\n",
    "ax.set_xscale(x_scale)\n",
    "ax.set_yscale(y_scale)\n"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "e492b5d6",
   "metadata": {
    "lines_to_next_cell": 0,
    "papermill": {
     "duration": 0.011515,
     "end_time": "2021-08-22T17:28:26.542636",
     "exception": false,
     "start_time": "2021-08-22T17:28:26.531121",
     "status": "completed"
    },
    "tags": []
   },
   "source": [
    "## F$_{\\nu}$\n",
    "\n",
    "The F$_{\\nu}$ shape of the photon model\n",
    "*if this is not a photon model, please ignore this auto-generated plot*"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 7,
   "id": "4edd2e51",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2021-08-22T17:28:26.619416Z",
     "iopub.status.busy": "2021-08-22T17:28:26.608325Z",
     "iopub.status.idle": "2021-08-22T17:28:27.139880Z",
     "shell.execute_reply": "2021-08-22T17:28:27.140785Z"
    },
    "papermill": {
     "duration": 0.588159,
     "end_time": "2021-08-22T17:28:27.141065",
     "exception": false,
     "start_time": "2021-08-22T17:28:26.552906",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "data": {
      "image/png": "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\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "fig, ax = plt.subplots()\n",
    "\n",
    "ax.plot(energy_grid, energy_grid * func(energy_grid), red)\n",
    "\n",
    "\n",
    "ax.set_xlabel(\"energy (keV)\")\n",
    "ax.set_ylabel(r\"energy flux (F$_{\\nu}$)\")\n",
    "ax.set_xscale(x_scale)\n",
    "ax.set_yscale(y_scale)\n",
    "\n"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "8a611891",
   "metadata": {
    "papermill": {
     "duration": 0.011109,
     "end_time": "2021-08-22T17:28:27.163518",
     "exception": false,
     "start_time": "2021-08-22T17:28:27.152409",
     "status": "completed"
    },
    "tags": []
   },
   "source": [
    "## $\\nu$F$_{\\nu}$\n",
    "\n",
    "The $\\nu$F$_{\\nu}$ shape of the photon model\n",
    "*if this is not a photon model, please ignore this auto-generated plot*"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 8,
   "id": "06881b90",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2021-08-22T17:28:27.329225Z",
     "iopub.status.busy": "2021-08-22T17:28:27.192149Z",
     "iopub.status.idle": "2021-08-22T17:28:27.831799Z",
     "shell.execute_reply": "2021-08-22T17:28:27.832742Z"
    },
    "papermill": {
     "duration": 0.658452,
     "end_time": "2021-08-22T17:28:27.833033",
     "exception": false,
     "start_time": "2021-08-22T17:28:27.174581",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "fig, ax = plt.subplots()\n",
    "\n",
    "ax.plot(energy_grid, energy_grid**2 * func(energy_grid), color=green)\n",
    "\n",
    "\n",
    "ax.set_xlabel(\"energy (keV)\")\n",
    "ax.set_ylabel(r\"$\\nu$F$_{\\nu}$\")\n",
    "ax.set_xscale(x_scale)\n",
    "ax.set_yscale(y_scale)\n"
   ]
  }
 ],
 "metadata": {
  "jupytext": {
   "formats": "ipynb,md"
  },
  "kernelspec": {
   "display_name": "Python 3",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.7.11"
  },
  "papermill": {
   "default_parameters": {},
   "duration": 6.55292,
   "end_time": "2021-08-22T17:28:28.478486",
   "environment_variables": {},
   "exception": null,
   "input_path": "Log_parabola.ipynb",
   "output_path": "../docs/notebooks/Log_parabola.ipynb",
   "parameters": {
    "func_name": "Log_parabola",
    "linear_range": false,
    "wide_energy_range": true,
    "x_scale": "log",
    "y_scale": "log"
   },
   "start_time": "2021-08-22T17:28:21.925566",
   "version": "2.3.3"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 5
}