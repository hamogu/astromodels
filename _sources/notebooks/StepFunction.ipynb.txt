{
 "cells": [
  {
   "cell_type": "markdown",
   "id": "61d31cb7",
   "metadata": {
    "papermill": {
     "duration": 0.009699,
     "end_time": "2021-08-23T05:21:09.130440",
     "exception": false,
     "start_time": "2021-08-23T05:21:09.120741",
     "status": "completed"
    },
    "tags": []
   },
   "source": [
    "# StepFunction"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 1,
   "id": "eeefa5ab",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2021-08-23T05:21:09.157692Z",
     "iopub.status.busy": "2021-08-23T05:21:09.156764Z",
     "iopub.status.idle": "2021-08-23T05:21:12.209740Z",
     "shell.execute_reply": "2021-08-23T05:21:12.210905Z"
    },
    "nbsphinx": "hidden",
    "papermill": {
     "duration": 3.072183,
     "end_time": "2021-08-23T05:21:12.211313",
     "exception": false,
     "start_time": "2021-08-23T05:21:09.139130",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "%%capture\n",
    "\n",
    "import numpy as np\n",
    "\n",
    "import matplotlib.pyplot as plt\n",
    "\n",
    "import warnings\n",
    "warnings.simplefilter(\"ignore\")\n",
    "\n",
    "from astromodels.functions.function import _known_functions\n",
    "\n",
    "\n",
    "from jupyterthemes import jtplot\n",
    "jtplot.style(context=\"talk\", fscale=1, ticks=True, grid=False)\n",
    "%matplotlib inline"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 2,
   "id": "a53334bf",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2021-08-23T05:21:12.237270Z",
     "iopub.status.busy": "2021-08-23T05:21:12.236209Z",
     "iopub.status.idle": "2021-08-23T05:21:12.239204Z",
     "shell.execute_reply": "2021-08-23T05:21:12.239955Z"
    },
    "nbsphinx": "hidden",
    "papermill": {
     "duration": 0.019134,
     "end_time": "2021-08-23T05:21:12.240237",
     "exception": false,
     "start_time": "2021-08-23T05:21:12.221103",
     "status": "completed"
    },
    "tags": [
     "parameters"
    ]
   },
   "outputs": [],
   "source": [
    "func_name = \"TbAbs\"\n",
    "\n",
    "x_scale=\"log\"\n",
    "y_scale=\"log\"\n",
    "\n",
    "linear_range = False\n",
    "\n",
    "wide_energy_range = False"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 3,
   "id": "9cffb348",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2021-08-23T05:21:12.263336Z",
     "iopub.status.busy": "2021-08-23T05:21:12.262442Z",
     "iopub.status.idle": "2021-08-23T05:21:12.269470Z",
     "shell.execute_reply": "2021-08-23T05:21:12.270107Z"
    },
    "papermill": {
     "duration": 0.021491,
     "end_time": "2021-08-23T05:21:12.270395",
     "exception": false,
     "start_time": "2021-08-23T05:21:12.248904",
     "status": "completed"
    },
    "tags": [
     "injected-parameters"
    ]
   },
   "outputs": [],
   "source": [
    "# Parameters\n",
    "func_name = \"StepFunction\"\n",
    "wide_energy_range = True\n",
    "x_scale = \"linear\"\n",
    "y_scale = \"linear\"\n",
    "linear_range = True\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 4,
   "id": "89a631c1",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2021-08-23T05:21:12.298189Z",
     "iopub.status.busy": "2021-08-23T05:21:12.297009Z",
     "iopub.status.idle": "2021-08-23T05:21:12.300851Z",
     "shell.execute_reply": "2021-08-23T05:21:12.302078Z"
    },
    "lines_to_next_cell": 0,
    "nbsphinx": "hidden",
    "papermill": {
     "duration": 0.023131,
     "end_time": "2021-08-23T05:21:12.302475",
     "exception": false,
     "start_time": "2021-08-23T05:21:12.279344",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "func = _known_functions[func_name]()\n",
    "\n",
    "if wide_energy_range:\n",
    "\n",
    "    energy_grid = np.geomspace(1e2,1e4,500)\n",
    "    \n",
    "else:\n",
    "    \n",
    "    energy_grid = np.geomspace(2e-1,1e1,1000)\n",
    "\n",
    "if linear_range:\n",
    "\n",
    "\tenergy_grid = np.linspace(-5,5,1000)\n",
    "\n",
    "    \n",
    "blue = \"#4152E3\"\n",
    "red = \"#E3414B\"\n",
    "green = \"#41E39E\""
   ]
  },
  {
   "cell_type": "markdown",
   "id": "5ad9bd59",
   "metadata": {
    "lines_to_next_cell": 0,
    "papermill": {
     "duration": 0.009267,
     "end_time": "2021-08-23T05:21:12.322089",
     "exception": false,
     "start_time": "2021-08-23T05:21:12.312822",
     "status": "completed"
    },
    "tags": []
   },
   "source": [
    "## Description"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 5,
   "id": "755fa0fd",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2021-08-23T05:21:12.355344Z",
     "iopub.status.busy": "2021-08-23T05:21:12.354309Z",
     "iopub.status.idle": "2021-08-23T05:21:12.358212Z",
     "shell.execute_reply": "2021-08-23T05:21:12.358859Z"
    },
    "papermill": {
     "duration": 0.026153,
     "end_time": "2021-08-23T05:21:12.359147",
     "exception": false,
     "start_time": "2021-08-23T05:21:12.332994",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "data": {
      "text/html": [
       "<ul>\n",
       "\n",
       "<li>description: A function which is constant on the interval lower_bound - upper_bound and 0 outside the interval. The extremes of the interval are counted as part of the interval.</li>\n",
       "\n",
       "<li>formula: $ f(x)=\\begin{cases}0 & x < \\text{lower_bound} \\\\\\text{value} & \\text{lower_bound} \\le x \\le \\text{upper_bound} \\\\ 0 & x > \\text{upper_bound} \\end{cases}$</li>\n",
       "\n",
       "<li>parameters: \n",
       "<ul>\n",
       "\n",
       "<li>lower_bound: \n",
       "<ul>\n",
       "\n",
       "<li>value: 0.0</li>\n",
       "\n",
       "<li>desc: Lower bound for the interval</li>\n",
       "\n",
       "<li>min_value: None</li>\n",
       "\n",
       "<li>max_value: None</li>\n",
       "\n",
       "<li>unit: </li>\n",
       "\n",
       "<li>is_normalization: False</li>\n",
       "\n",
       "<li>delta: 0.1</li>\n",
       "\n",
       "<li>free: True</li>\n",
       "\n",
       "</ul>\n",
       "\n",
       "</li>\n",
       "\n",
       "<li>upper_bound: \n",
       "<ul>\n",
       "\n",
       "<li>value: 1.0</li>\n",
       "\n",
       "<li>desc: Upper bound for the interval</li>\n",
       "\n",
       "<li>min_value: None</li>\n",
       "\n",
       "<li>max_value: None</li>\n",
       "\n",
       "<li>unit: </li>\n",
       "\n",
       "<li>is_normalization: False</li>\n",
       "\n",
       "<li>delta: 0.1</li>\n",
       "\n",
       "<li>free: True</li>\n",
       "\n",
       "</ul>\n",
       "\n",
       "</li>\n",
       "\n",
       "<li>value: \n",
       "<ul>\n",
       "\n",
       "<li>value: 1.0</li>\n",
       "\n",
       "<li>desc: Value in the interval</li>\n",
       "\n",
       "<li>min_value: None</li>\n",
       "\n",
       "<li>max_value: None</li>\n",
       "\n",
       "<li>unit: </li>\n",
       "\n",
       "<li>is_normalization: False</li>\n",
       "\n",
       "<li>delta: 0.1</li>\n",
       "\n",
       "<li>free: True</li>\n",
       "\n",
       "</ul>\n",
       "\n",
       "</li>\n",
       "\n",
       "</ul>\n",
       "\n",
       "</li>\n",
       "\n",
       "</ul>\n"
      ],
      "text/plain": [
       "  * description: A function which is constant on the interval lower_bound - upper_bound\n",
       "    * and 0 outside the interval. The extremes of the interval are counted as part of\n",
       "    * the interval.\n",
       "  * formula: $ f(x)=\\begin{cases}0 & x < \\text{lower_bound} \\\\\\text{value} & \\text{lower_bound}\n",
       "    * \\le x \\le \\text{upper_bound} \\\\ 0 & x > \\text{upper_bound} \\end{cases}$\n",
       "  * parameters:\n",
       "    * lower_bound:\n",
       "      * value: 0.0\n",
       "      * desc: Lower bound for the interval\n",
       "      * min_value: null\n",
       "      * max_value: null\n",
       "      * unit: ''\n",
       "      * is_normalization: false\n",
       "      * delta: 0.1\n",
       "      * free: true\n",
       "    * upper_bound:\n",
       "      * value: 1.0\n",
       "      * desc: Upper bound for the interval\n",
       "      * min_value: null\n",
       "      * max_value: null\n",
       "      * unit: ''\n",
       "      * is_normalization: false\n",
       "      * delta: 0.1\n",
       "      * free: true\n",
       "    * value:\n",
       "      * value: 1.0\n",
       "      * desc: Value in the interval\n",
       "      * min_value: null\n",
       "      * max_value: null\n",
       "      * unit: ''\n",
       "      * is_normalization: false\n",
       "      * delta: 0.1\n",
       "      * free: true"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "func.display()"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "409e8d63",
   "metadata": {
    "papermill": {
     "duration": 0.009889,
     "end_time": "2021-08-23T05:21:12.379321",
     "exception": false,
     "start_time": "2021-08-23T05:21:12.369432",
     "status": "completed"
    },
    "tags": []
   },
   "source": [
    "## Shape \n",
    "\n",
    "The shape of the function. \n",
    "\n",
    "*If this is not a photon model but a prior or linear function then ignore the units as these docs are auto-generated*"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 6,
   "id": "0617ecc3",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2021-08-23T05:21:12.434805Z",
     "iopub.status.busy": "2021-08-23T05:21:12.433300Z",
     "iopub.status.idle": "2021-08-23T05:21:12.618769Z",
     "shell.execute_reply": "2021-08-23T05:21:12.619635Z"
    },
    "papermill": {
     "duration": 0.230938,
     "end_time": "2021-08-23T05:21:12.619926",
     "exception": false,
     "start_time": "2021-08-23T05:21:12.388988",
     "status": "completed"
    },
    "tags": [
     "nbsphinx-thumbnail"
    ]
   },
   "outputs": [
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "fig, ax = plt.subplots()\n",
    "\n",
    "\n",
    "ax.plot(energy_grid, func(energy_grid), color=blue)\n",
    "\n",
    "ax.set_xlabel(\"energy (keV)\")\n",
    "ax.set_ylabel(\"photon flux\")\n",
    "ax.set_xscale(x_scale)\n",
    "ax.set_yscale(y_scale)\n"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "7670b5f4",
   "metadata": {
    "lines_to_next_cell": 0,
    "papermill": {
     "duration": 0.011535,
     "end_time": "2021-08-23T05:21:12.643178",
     "exception": false,
     "start_time": "2021-08-23T05:21:12.631643",
     "status": "completed"
    },
    "tags": []
   },
   "source": [
    "## F$_{\\nu}$\n",
    "\n",
    "The F$_{\\nu}$ shape of the photon model\n",
    "*if this is not a photon model, please ignore this auto-generated plot*"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 7,
   "id": "cfc1cd91",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2021-08-23T05:21:12.694174Z",
     "iopub.status.busy": "2021-08-23T05:21:12.693226Z",
     "iopub.status.idle": "2021-08-23T05:21:13.073323Z",
     "shell.execute_reply": "2021-08-23T05:21:13.074235Z"
    },
    "papermill": {
     "duration": 0.420573,
     "end_time": "2021-08-23T05:21:13.074528",
     "exception": false,
     "start_time": "2021-08-23T05:21:12.653955",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "fig, ax = plt.subplots()\n",
    "\n",
    "ax.plot(energy_grid, energy_grid * func(energy_grid), red)\n",
    "\n",
    "\n",
    "ax.set_xlabel(\"energy (keV)\")\n",
    "ax.set_ylabel(r\"energy flux (F$_{\\nu}$)\")\n",
    "ax.set_xscale(x_scale)\n",
    "ax.set_yscale(y_scale)\n",
    "\n"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "7ef28a79",
   "metadata": {
    "papermill": {
     "duration": 0.011604,
     "end_time": "2021-08-23T05:21:13.097801",
     "exception": false,
     "start_time": "2021-08-23T05:21:13.086197",
     "status": "completed"
    },
    "tags": []
   },
   "source": [
    "## $\\nu$F$_{\\nu}$\n",
    "\n",
    "The $\\nu$F$_{\\nu}$ shape of the photon model\n",
    "*if this is not a photon model, please ignore this auto-generated plot*"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 8,
   "id": "d5f121f9",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2021-08-23T05:21:13.128968Z",
     "iopub.status.busy": "2021-08-23T05:21:13.124521Z",
     "iopub.status.idle": "2021-08-23T05:21:13.287061Z",
     "shell.execute_reply": "2021-08-23T05:21:13.287994Z"
    },
    "papermill": {
     "duration": 0.178948,
     "end_time": "2021-08-23T05:21:13.288284",
     "exception": false,
     "start_time": "2021-08-23T05:21:13.109336",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "fig, ax = plt.subplots()\n",
    "\n",
    "ax.plot(energy_grid, energy_grid**2 * func(energy_grid), color=green)\n",
    "\n",
    "\n",
    "ax.set_xlabel(\"energy (keV)\")\n",
    "ax.set_ylabel(r\"$\\nu$F$_{\\nu}$\")\n",
    "ax.set_xscale(x_scale)\n",
    "ax.set_yscale(y_scale)\n"
   ]
  }
 ],
 "metadata": {
  "jupytext": {
   "formats": "ipynb,md"
  },
  "kernelspec": {
   "display_name": "Python 3",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.7.11"
  },
  "papermill": {
   "default_parameters": {},
   "duration": 5.740974,
   "end_time": "2021-08-23T05:21:13.819195",
   "environment_variables": {},
   "exception": null,
   "input_path": "StepFunction.ipynb",
   "output_path": "../docs/notebooks/StepFunction.ipynb",
   "parameters": {
    "func_name": "StepFunction",
    "linear_range": true,
    "wide_energy_range": true,
    "x_scale": "linear",
    "y_scale": "linear"
   },
   "start_time": "2021-08-23T05:21:08.078221",
   "version": "2.3.3"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 5
}